<?php
/**
 * Document
 *
 * PHP version 5
 *
 * @category Class
 * @package  Sufel\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SUFEL
 *
 * Sufel API for Companies.
 *
 * OpenAPI spec version: 2.0
 * Contact: giansalex@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Sufel\Client\Model;

use \ArrayAccess;
use \Sufel\Client\ObjectSerializer;

/**
 * Document Class Doc Comment
 *
 * @category Class
 * @package  Sufel\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Document implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Document';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'emisor' => 'string',
        'tipo' => 'string',
        'serie' => 'string',
        'correlativo' => 'string',
        'fecha' => '\DateTime',
        'total' => 'float',
        'cliente_tipo' => 'string',
        'cliente_doc' => 'string',
        'cliente_nombre' => 'string',
        'filename' => 'string',
        'baja' => 'string',
        'xml' => 'string',
        'pdf' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'emisor' => null,
        'tipo' => null,
        'serie' => null,
        'correlativo' => null,
        'fecha' => 'date',
        'total' => 'float',
        'cliente_tipo' => null,
        'cliente_doc' => null,
        'cliente_nombre' => null,
        'filename' => null,
        'baja' => null,
        'xml' => null,
        'pdf' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'emisor' => 'emisor',
        'tipo' => 'tipo',
        'serie' => 'serie',
        'correlativo' => 'correlativo',
        'fecha' => 'fecha',
        'total' => 'total',
        'cliente_tipo' => 'cliente_tipo',
        'cliente_doc' => 'cliente_doc',
        'cliente_nombre' => 'cliente_nombre',
        'filename' => 'filename',
        'baja' => 'baja',
        'xml' => 'xml',
        'pdf' => 'pdf'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'emisor' => 'setEmisor',
        'tipo' => 'setTipo',
        'serie' => 'setSerie',
        'correlativo' => 'setCorrelativo',
        'fecha' => 'setFecha',
        'total' => 'setTotal',
        'cliente_tipo' => 'setClienteTipo',
        'cliente_doc' => 'setClienteDoc',
        'cliente_nombre' => 'setClienteNombre',
        'filename' => 'setFilename',
        'baja' => 'setBaja',
        'xml' => 'setXml',
        'pdf' => 'setPdf'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'emisor' => 'getEmisor',
        'tipo' => 'getTipo',
        'serie' => 'getSerie',
        'correlativo' => 'getCorrelativo',
        'fecha' => 'getFecha',
        'total' => 'getTotal',
        'cliente_tipo' => 'getClienteTipo',
        'cliente_doc' => 'getClienteDoc',
        'cliente_nombre' => 'getClienteNombre',
        'filename' => 'getFilename',
        'baja' => 'getBaja',
        'xml' => 'getXml',
        'pdf' => 'getPdf'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['emisor'] = isset($data['emisor']) ? $data['emisor'] : null;
        $this->container['tipo'] = isset($data['tipo']) ? $data['tipo'] : null;
        $this->container['serie'] = isset($data['serie']) ? $data['serie'] : null;
        $this->container['correlativo'] = isset($data['correlativo']) ? $data['correlativo'] : null;
        $this->container['fecha'] = isset($data['fecha']) ? $data['fecha'] : null;
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
        $this->container['cliente_tipo'] = isset($data['cliente_tipo']) ? $data['cliente_tipo'] : null;
        $this->container['cliente_doc'] = isset($data['cliente_doc']) ? $data['cliente_doc'] : null;
        $this->container['cliente_nombre'] = isset($data['cliente_nombre']) ? $data['cliente_nombre'] : null;
        $this->container['filename'] = isset($data['filename']) ? $data['filename'] : null;
        $this->container['baja'] = isset($data['baja']) ? $data['baja'] : null;
        $this->container['xml'] = isset($data['xml']) ? $data['xml'] : null;
        $this->container['pdf'] = isset($data['pdf']) ? $data['pdf'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets emisor
     *
     * @return string
     */
    public function getEmisor()
    {
        return $this->container['emisor'];
    }

    /**
     * Sets emisor
     *
     * @param string $emisor emisor
     *
     * @return $this
     */
    public function setEmisor($emisor)
    {
        $this->container['emisor'] = $emisor;

        return $this;
    }

    /**
     * Gets tipo
     *
     * @return string
     */
    public function getTipo()
    {
        return $this->container['tipo'];
    }

    /**
     * Sets tipo
     *
     * @param string $tipo tipo
     *
     * @return $this
     */
    public function setTipo($tipo)
    {
        $this->container['tipo'] = $tipo;

        return $this;
    }

    /**
     * Gets serie
     *
     * @return string
     */
    public function getSerie()
    {
        return $this->container['serie'];
    }

    /**
     * Sets serie
     *
     * @param string $serie serie
     *
     * @return $this
     */
    public function setSerie($serie)
    {
        $this->container['serie'] = $serie;

        return $this;
    }

    /**
     * Gets correlativo
     *
     * @return string
     */
    public function getCorrelativo()
    {
        return $this->container['correlativo'];
    }

    /**
     * Sets correlativo
     *
     * @param string $correlativo correlativo
     *
     * @return $this
     */
    public function setCorrelativo($correlativo)
    {
        $this->container['correlativo'] = $correlativo;

        return $this;
    }

    /**
     * Gets fecha
     *
     * @return \DateTime
     */
    public function getFecha()
    {
        return $this->container['fecha'];
    }

    /**
     * Sets fecha
     *
     * @param \DateTime $fecha fecha
     *
     * @return $this
     */
    public function setFecha($fecha)
    {
        $this->container['fecha'] = $fecha;

        return $this;
    }

    /**
     * Gets total
     *
     * @return float
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param float $total total
     *
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets cliente_tipo
     *
     * @return string
     */
    public function getClienteTipo()
    {
        return $this->container['cliente_tipo'];
    }

    /**
     * Sets cliente_tipo
     *
     * @param string $cliente_tipo cliente_tipo
     *
     * @return $this
     */
    public function setClienteTipo($cliente_tipo)
    {
        $this->container['cliente_tipo'] = $cliente_tipo;

        return $this;
    }

    /**
     * Gets cliente_doc
     *
     * @return string
     */
    public function getClienteDoc()
    {
        return $this->container['cliente_doc'];
    }

    /**
     * Sets cliente_doc
     *
     * @param string $cliente_doc cliente_doc
     *
     * @return $this
     */
    public function setClienteDoc($cliente_doc)
    {
        $this->container['cliente_doc'] = $cliente_doc;

        return $this;
    }

    /**
     * Gets cliente_nombre
     *
     * @return string
     */
    public function getClienteNombre()
    {
        return $this->container['cliente_nombre'];
    }

    /**
     * Sets cliente_nombre
     *
     * @param string $cliente_nombre cliente_nombre
     *
     * @return $this
     */
    public function setClienteNombre($cliente_nombre)
    {
        $this->container['cliente_nombre'] = $cliente_nombre;

        return $this;
    }

    /**
     * Gets filename
     *
     * @return string
     */
    public function getFilename()
    {
        return $this->container['filename'];
    }

    /**
     * Sets filename
     *
     * @param string $filename filename
     *
     * @return $this
     */
    public function setFilename($filename)
    {
        $this->container['filename'] = $filename;

        return $this;
    }

    /**
     * Gets baja
     *
     * @return string
     */
    public function getBaja()
    {
        return $this->container['baja'];
    }

    /**
     * Sets baja
     *
     * @param string $baja baja
     *
     * @return $this
     */
    public function setBaja($baja)
    {
        $this->container['baja'] = $baja;

        return $this;
    }

    /**
     * Gets xml
     *
     * @return string
     */
    public function getXml()
    {
        return $this->container['xml'];
    }

    /**
     * Sets xml
     *
     * @param string $xml Archivo Xml en base64
     *
     * @return $this
     */
    public function setXml($xml)
    {
        $this->container['xml'] = $xml;

        return $this;
    }

    /**
     * Gets pdf
     *
     * @return string
     */
    public function getPdf()
    {
        return $this->container['pdf'];
    }

    /**
     * Sets pdf
     *
     * @param string $pdf Archivo Pdf en base64
     *
     * @return $this
     */
    public function setPdf($pdf)
    {
        $this->container['pdf'] = $pdf;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


